//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YamahaAPI.Procedure
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class yamahaEntities : DbContext
    {
        public yamahaEntities()
            : base("name=yamahaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<UserBooking> UserBookings { get; set; }
    
        public virtual ObjectResult<usp_get_scooters_with_specifications_Result> usp_get_scooters_with_specifications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_get_scooters_with_specifications_Result>("usp_get_scooters_with_specifications");
        }
    
        public virtual ObjectResult<usp_get_motorcycles_with_specifications_Result> usp_get_motorcycles_with_specifications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_get_motorcycles_with_specifications_Result>("usp_get_motorcycles_with_specifications");
        }
    
        public virtual ObjectResult<usp_get_helmets_Result> usp_get_helmets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_get_helmets_Result>("usp_get_helmets");
        }
    
        public virtual int InsertUserBooking(string firstName, string lastName, string email, string gender, Nullable<decimal> pincode, string city, string vehicle, string helmet, string licenseType, string phoneNumber, string bookingDate, Nullable<decimal> totalCost)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(decimal));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var vehicleParameter = vehicle != null ?
                new ObjectParameter("vehicle", vehicle) :
                new ObjectParameter("vehicle", typeof(string));
    
            var helmetParameter = helmet != null ?
                new ObjectParameter("helmet", helmet) :
                new ObjectParameter("helmet", typeof(string));
    
            var licenseTypeParameter = licenseType != null ?
                new ObjectParameter("licenseType", licenseType) :
                new ObjectParameter("licenseType", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var bookingDateParameter = bookingDate != null ?
                new ObjectParameter("bookingDate", bookingDate) :
                new ObjectParameter("bookingDate", typeof(string));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("totalCost", totalCost) :
                new ObjectParameter("totalCost", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserBooking", firstNameParameter, lastNameParameter, emailParameter, genderParameter, pincodeParameter, cityParameter, vehicleParameter, helmetParameter, licenseTypeParameter, phoneNumberParameter, bookingDateParameter, totalCostParameter);
        }
    
        public virtual ObjectResult<usp_getUserbookingDetails_Result> usp_getUserbookingDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getUserbookingDetails_Result>("usp_getUserbookingDetails");
        }
    
        public virtual ObjectResult<usp_getbookingDetails_Result> usp_getbookingDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getbookingDetails_Result>("usp_getbookingDetails");
        }
    
        public virtual int usp_delete_booking_record(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_delete_booking_record", idParameter);
        }
    
        public virtual int usp_update_userDetails(Nullable<decimal> id, string firstName, string lastName, string email, string gender, Nullable<decimal> pincode, string city, string vehicle, string helmet, string licenseType, string phoneNumber, string bookingDate, Nullable<decimal> totalCost)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var pincodeParameter = pincode.HasValue ?
                new ObjectParameter("pincode", pincode) :
                new ObjectParameter("pincode", typeof(decimal));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var vehicleParameter = vehicle != null ?
                new ObjectParameter("vehicle", vehicle) :
                new ObjectParameter("vehicle", typeof(string));
    
            var helmetParameter = helmet != null ?
                new ObjectParameter("helmet", helmet) :
                new ObjectParameter("helmet", typeof(string));
    
            var licenseTypeParameter = licenseType != null ?
                new ObjectParameter("licenseType", licenseType) :
                new ObjectParameter("licenseType", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var bookingDateParameter = bookingDate != null ?
                new ObjectParameter("bookingDate", bookingDate) :
                new ObjectParameter("bookingDate", typeof(string));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("totalCost", totalCost) :
                new ObjectParameter("totalCost", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_userDetails", idParameter, firstNameParameter, lastNameParameter, emailParameter, genderParameter, pincodeParameter, cityParameter, vehicleParameter, helmetParameter, licenseTypeParameter, phoneNumberParameter, bookingDateParameter, totalCostParameter);
        }
    }
}
